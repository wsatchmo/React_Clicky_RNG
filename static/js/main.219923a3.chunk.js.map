{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleSaveClick","id","currentId","parseInt","currentTarget","trim","characterState","state","characters","tileClicked","filter","tile","rngMod","chance","rng","Math","floor","random","console","log","clicked","setState","mode","gif","handleCorrectClick","handleIncorrectClick","isGuessCorrect","score","topScore","maxScore","message","messageClass","resetGame","i","length","this","className","Navbar","title","src","frameBorder","allowFullScreen","Jumbotron","map","name","image","Card","onClick","key","CardImg","width","alt","CardBody","CardTitle","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.219923a3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, Card, Jumbotron, CardImg} from 'react-bootstrap';\nimport {CardBody, CardTitle} from 'reactstrap';\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: \"Defeat all challengers!\",\n      isGuessCorrect: true,\n      characters: characters,\n      score: 0,\n      maxScore: 16,\n      topScore: 0,\n      chance: 16,\n      mode: \"Easy\",\n      gif: \"https://giphy.com/embed/mzFO6P0KLFDsQ\"\n    };\n  }\n\n  /*Game Logic*/\n  // Click handler\n  handleSaveClick = id => {\n    //Get that id\n    let currentId = parseInt(id.currentTarget.id.trim());\n    // Character's state\n    const characterState = this.state.characters;\n    // Match clicked id to characters\n    const tileClicked = characterState.filter(tile => tile.id === currentId);\n\n    //Produce RNG & throw\n    const rngMod = this.state.chance;\n    const rng = Math.floor(Math.random() * rngMod) + 1;\n    console.log(\"Your throw: \" + rng);\n    console.log(\"Enemy throw: \" + rngMod);\n\n    //Check if that tile was already clicked. If it was, instant loss.\n    if (tileClicked[0].clicked === false) {\n      tileClicked[0].clicked = true;\n  \n      //OLD VERSION -- RANDOMIZE CHARACTERS TO MATCH\n      // Randomize characters\n      // this.randomizeCharacters(characterState);\n\n      //Assuming it hasn't been clicked;\n      //Lower chance and handle correct\n      //Using RNG that scales with each win\n      if (rng !== rngMod){\n      // If tile isn't clicked, it is now\n        this.setState({\n          chance: this.state.chance -1\n        })\n\n        //Mode goes higher as chances slim\n        if (this.state.chance <= 4){\n          this.setState({\n            mode: \"Hard\",\n            gif: \"https://giphy.com/embed/7Gi2BoVVIbSDK\"\n          })\n        } else if (this.state.chance <= 9){\n          this.setState({\n            mode: \"Medium\",\n            gif: \"https://giphy.com/embed/7bay8XeEYJIkw\"\n          })\n        }  \n\n        this.handleCorrectClick();\n      } else {\n        this.handleIncorrectClick();\n      }\n      this.setState({ characterState });\n    } else {\n      this.handleIncorrectClick();\n    }\n  };\n\n  //OLD VERSION -- RANDOMIZE CHARACTERS TO MATCH\n  // Randomize function\n  // randomizeCharacters = randomize => {\n  //   randomize.sort((a, b) => {\n  //     return 0.5 - Math.random();\n  //   });\n  // };\n\n  // Handles correct guess\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"A new champion! HADOUKEN!\",\n        messageClass: \"correct\",\n        gif: \"https://giphy.com/embed/YrTHbRw2ADppqfCmiC\"\n      });\n      this.resetGame();\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Another enemy defeated...\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handles incorrect guesses\n  handleIncorrectClick = () => {\n    this.setState({\n      isGuessCorrect: false,\n      score: 0,\n      message: \"Never stood a chance.\"\n    });\n    this.resetGame();\n  };\n\n  // Reset\n  resetGame = () => {\n    const characterState = this.state.characters;\n    for (let i = 0; i < characterState.length; i++) {\n      characterState[i].clicked = false;\n    }\n    this.setState({ \n      score: 0,\n      chance: 16,\n      mode: \"Easy\",\n      gif: \"https://giphy.com/embed/mzFO6P0KLFDsQ\" });\n  };\n\n  // Render to the page\n  render() {\n    const { message, score, characters, topScore, mode, gif } = this.state;\n    return (\n      <div className=\"fluid-container\">\n        <Navbar className=\"my-nav\">\n          <h3>Score: {score}</h3>\n          <h3>High Score: {topScore}</h3>\n          <h3>Difficulty: <span className={mode}>{mode}</span></h3>\n          <iframe title=\"Mode GIF\" src={gif} frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\n        </Navbar>\n        <Jumbotron className=\"text-center row jumbo\" id=\"jumbo-scharacterState\"> \n          <h2 className=\"text-center main-text\">{message}</h2>\n        </Jumbotron>\n \n        <div className=\"justify-content-center flex-wrap row\">\n          {characters.map(({ id, name, image, clicked }) => (\n            <Card className=\"card-whole\"\n              name={name}\n              onClick={this.handleSaveClick}\n              id={id}\n              key={id}\n            >\n              <CardImg                \n                src=\"https://www.nicepng.com/png/full/235-2359549_street-fighter-ko-png-ko-street-fighter-png.png\"\n                className={\"\" + clicked}/>\n              <CardImg width=\"100%\" alt=\"Card image cap\"\n                id={id}\n                src={image}\n              />\n              <CardBody id={id}>\n                <CardTitle className=\"text-center card-names\">\n                  <strong className=\"fighter\">{name}</strong>\n                </CardTitle>\n              </CardBody> \n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}